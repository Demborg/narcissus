{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["modelURL","LatentSlider","type","className","min","max","value","this","props","step","onChange","e","updater","parseFloat","target","React","Component","VAEDecoder","canvasRef","createRef","latent","i","latent_dim","push","Math","random","state","console","log","tf","model","setState","canvas","current","tensor","predict","imgTensor","reshape","shape","slice","height","width","data","bytes","Uint8ClampedArray","r","g","b","j","round","ctx","getContext","imageData","ImageData","putImageData","index","drawLatent","ref","map","updateLatent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8YAIMA,G,MAAW,wFAiBXC,E,uKACO,IAAD,OACR,OACE,6BACE,2BACCC,KAAK,QACLC,UAAU,SACVC,IAAI,KACJC,IAAI,IACJC,MAAOC,KAAKC,MAAMF,MAClBG,KAAK,MACLC,SAAU,SAACC,GAAD,OAAO,EAAKH,MAAMI,QAAQC,WAAWF,EAAEG,OAAOR,WAEzD,kC,GAbmBS,IAAMC,WAmB3BC,E,kDAGJ,WAAYT,GAAsB,IAAD,uBAC/B,cAAMA,IAHAU,UAAYH,IAAMI,YAKxB,IADA,IAAIC,EAAmB,GACdC,EAAI,EAAGA,EAAIb,EAAMc,WAAYD,IACpCD,EAAOG,KAAK,EAAIC,KAAKC,SAAW,GAJH,OAO/B,EAAKC,MAAQ,CAAC,OAAUN,GAPO,E,uLAW/BO,QAAQC,IAAI,sBAAwB5B,G,SAChB6B,IAAmB7B,G,OAAjC8B,E,OACNvB,KAAKwB,SAAS,CAAC,MAASD,I,0RAIlBE,EAASzB,KAAKW,UAAUe,QACN,MAApB1B,KAAKmB,MAAMI,OAA2B,MAAVE,E,wBAC9BL,QAAQC,IAAI,iBACNM,EAAU3B,KAAKmB,MAAMI,MAAMK,QAAQN,IAAY,CAACtB,KAAKmB,MAAMN,UAC3DgB,EAAYF,EAAOG,QAAQ,CAACH,EAAOI,MAAM,GAAIJ,EAAOI,MAAM,GAAIJ,EAAOI,MAAM,K,EACzDF,EAAUE,MAAMC,MAAM,EAAG,G,mBAA1CC,E,KAAQC,E,cAEIL,EAAUM,O,OAG7B,IAHMA,E,OACAC,EAAQ,IAAIC,kBAAkBH,EAAQD,EAAS,GAE5CnB,EAAI,EAAGA,EAAImB,EAASC,IAASpB,OAAG,gBAEvCwB,EAAkB,IAAdH,EAAS,EAAJrB,GACTyB,EAAsB,IAAlBJ,EAAS,EAAJrB,EAAQ,GACjB0B,EAAsB,IAAlBL,EAAS,EAAJrB,EAAQ,GAGjBsB,GADMK,EAAQ,EAAJ3B,GACA,GAAKG,KAAKyB,MAAMJ,GAC1BF,EAAMK,EAAI,GAAKxB,KAAKyB,MAAMH,GAC1BH,EAAMK,EAAI,GAAKxB,KAAKyB,MAAMF,GAC1BJ,EAAMK,EAAI,GAAK,IAGjBhB,EAAOS,MAAQA,EACfT,EAAOQ,OAASA,EACVU,EAAMlB,EAAOmB,WAAW,MACxBC,EAAY,IAAIC,UAAUV,EAAOF,EAAOD,GACpC,MAAPU,GACDA,EAAII,aAAaF,EAAW,EAAG,G,0IAMxBG,EAAejD,GAC1B,IAAMc,EAASb,KAAKmB,MAAMN,OAAOmB,QACjCnB,EAAOmC,GAASjD,EAChBC,KAAKwB,SAAS,CAAC,OAAUX,M,+BAGjB,IAAD,OAEP,OADAb,KAAKiD,aAEH,6BACE,4BACAC,IAAKlD,KAAKW,UACVf,UAAU,kBAEV,yDACA,6BACGI,KAAKmB,MAAMN,OAAOsC,KACjB,SAACpD,EAAOiD,GAAR,OAAkB,kBAAC,EAAD,CAAcjD,MAAOA,EAAOM,QAAS,SAACN,GAAD,OAAiB,EAAKqD,aAAaJ,EAAOjD,e,GAvEpFS,IAAMC,WA2FhB4C,MAbf,WACE,OACE,yBAAKzD,UAAU,OACb,4BAAQA,UAAU,cAChB,iEAGA,kBAAC,EAAD,CAAYmB,WAAY,QCjHZuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.92875c44.chunk.js","sourcesContent":["import React from 'react';\nimport * as tf from '@tensorflow/tfjs'\nimport './App.css';\n\nconst modelURL = 'https://raw.githubusercontent.com/Demborg/narcissus/master/public/decoder/model.json';\n\ninterface DecoderProps {\n  latent_dim: number;\n}\n\ninterface DecoderState {\n  latent: number[];\n  model?: tf.LayersModel;\n}\n\ninterface SliderProps {\n  value: number;\n  updater(value: number): void;\n}\n\n\nclass LatentSlider extends React.Component<SliderProps, {}> {\n  render () {\n    return (\n      <div>\n        <input\n         type=\"range\" \n         className=\"Slider\"\n         min=\"-3\"\n         max=\"3\"\n         value={this.props.value}\n         step=\"0.1\" \n         onChange={(e) => this.props.updater(parseFloat(e.target.value))}\n        />\n        <br/>\n      </div>\n    )\n  }\n}\n\nclass VAEDecoder extends React.Component<DecoderProps, DecoderState>{\n  private canvasRef = React.createRef<HTMLCanvasElement>();\n\n  constructor(props: DecoderProps) {\n    super(props);\n    let latent: number[] = [];\n    for (let i = 0; i < props.latent_dim; i++){\n      latent.push(6 * Math.random() - 3)\n    }\n\n    this.state = {'latent': latent}\n  }\n\n  async componentDidMount() {\n    console.log('loading model from ' + modelURL)\n    const model = await tf.loadLayersModel(modelURL);\n    this.setState({'model': model});\n  }\n \n async drawLatent() {\n    const canvas = this.canvasRef.current;\n    if (this.state.model != null && canvas != null) {\n      console.log('Starting draw')\n      const tensor = (this.state.model.predict(tf.tensor2d([this.state.latent])) as tf.Tensor4D);\n      const imgTensor = tensor.reshape([tensor.shape[1], tensor.shape[2], tensor.shape[3]]);\n      const [height, width] = imgTensor.shape.slice(0, 2);\n\n      const data = await imgTensor.data();\n      const bytes = new Uint8ClampedArray(width * height * 4);\n\n      for (let i = 0; i < height * width; ++i) {\n        let r, g, b;\n        r = data[i * 3] * 255;\n        g = data[i * 3 + 1] * 255;\n        b = data[i * 3 + 2] * 255;\n\n        const j = i * 4\n        bytes[j + 0] = Math.round(r);\n        bytes[j + 1] = Math.round(g);\n        bytes[j + 2] = Math.round(b);\n        bytes[j + 3] = 255;\n      }\n\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = new ImageData(bytes, width, height);\n      if(ctx != null) {\n        ctx.putImageData(imageData, 0, 0);\n      }\n    }\n\n  }\n\n  updateLatent(index: number, value: number){\n    const latent = this.state.latent.slice();\n    latent[index] = value;\n    this.setState({'latent': latent})\n  }\n\n  render() {\n    this.drawLatent()\n    return (\n      <div>\n        <canvas\n        ref={this.canvasRef}\n        className='Latent-Canvas'\n        />\n        <div>explore the latent space</div>\n        <div>\n          {this.state.latent.map(\n            (value, index) => <LatentSlider value={value} updater={(value: number)=>this.updateLatent(index, value)}/>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>\n          This portrait doesn't exist (duh)\n        </h2>\n        <VAEDecoder latent_dim={16}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}